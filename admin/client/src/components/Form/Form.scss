// .form-component {
//   padding-bottom: $spacer-y;
// }
//
// // Vertically align readonly text with label
// .field.readonly {
//
//   label.left {
//     padding-top: 8px;
//   }
//
//   .middleColumn {
//     padding-top: 8px;
//   }
// }

.form {
  padding-bottom: $spacer-y;

  // scss-lint:disable SelectorDepth
  .readonly .form__field-holder > div { // Nesting required
    padding: 8px 0;
    text-transform: capitalize;
  }
  // scss-lint:enable SelectorDepth

  // TEMP until .text can be replaced with .form-control
  input.text {
    @extend .form-control;
  }
}


@mixin form-responsive($breakpoint-inline, $breakpoint-inline-limit-width, $breakpoint-inline-limit-width-max) {
  @include media-breakpoint-up($breakpoint-inline) {
    .form-group {
      @include make-row();
    }

    .form__field-label {
      @include make-col();
      @include make-col-span(3);
      // Override the `<label>` default with .form-control-label styles
      padding-top: $input-padding-y;
      padding-bottom: $input-padding-y;
      margin-bottom: 0;
    }

    .form__field-holder {
      @include make-col();
      @include make-col-span(9);
    }
  }

  @include media-breakpoint-up($breakpoint-inline-limit-width) {
    .form__field-label {
      @include make-col-span(2);
    }

    .form__field-holder {
      @include make-col-span(6);
    }
  }

  @include media-breakpoint-up($breakpoint-inline-limit-width-max) {
    .form__field-holder {
      @include make-col-span(5);
    }
  }
}


// Apply to forms to state when the label and input become inline
// @include form-responsive(turns inline, stops being full width, input only takes up a portion of screen width)
.form--inline {
  @include form-responsive(md, xl, xxl);
}
